// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tomato3713/nullwiki/pkg/ent/page"
	"github.com/tomato3713/nullwiki/pkg/ent/predicate"
	"github.com/tomato3713/nullwiki/pkg/ent/user"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// Where appends a list predicates to the PageUpdate builder.
func (pu *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetBody sets the "body" field.
func (pu *PageUpdate) SetBody(s string) *PageUpdate {
	pu.mutation.SetBody(s)
	return pu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (pu *PageUpdate) SetNillableBody(s *string) *PageUpdate {
	if s != nil {
		pu.SetBody(*s)
	}
	return pu
}

// SetTextFormat sets the "text_format" field.
func (pu *PageUpdate) SetTextFormat(u uint) *PageUpdate {
	pu.mutation.ResetTextFormat()
	pu.mutation.SetTextFormat(u)
	return pu
}

// SetNillableTextFormat sets the "text_format" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTextFormat(u *uint) *PageUpdate {
	if u != nil {
		pu.SetTextFormat(*u)
	}
	return pu
}

// AddTextFormat adds u to the "text_format" field.
func (pu *PageUpdate) AddTextFormat(u int) *PageUpdate {
	pu.mutation.AddTextFormat(u)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PageUpdate) SetUpdatedAt(t time.Time) *PageUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pu *PageUpdate) SetOwnerID(id int) *PageUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (pu *PageUpdate) SetNillableOwnerID(id *int) *PageUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the "owner" edge to the User entity.
func (pu *PageUpdate) SetOwner(u *User) *PageUpdate {
	return pu.SetOwnerID(u.ID)
}

// Mutation returns the PageMutation object of the builder.
func (pu *PageUpdate) Mutation() *PageMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pu *PageUpdate) ClearOwner() *PageUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PageUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PageUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *PageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Body(); ok {
		_spec.SetField(page.FieldBody, field.TypeString, value)
	}
	if value, ok := pu.mutation.TextFormat(); ok {
		_spec.SetField(page.FieldTextFormat, field.TypeUint, value)
	}
	if value, ok := pu.mutation.AddedTextFormat(); ok {
		_spec.AddField(page.FieldTextFormat, field.TypeUint, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.OwnerTable,
			Columns: []string{page.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.OwnerTable,
			Columns: []string{page.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageMutation
}

// SetBody sets the "body" field.
func (puo *PageUpdateOne) SetBody(s string) *PageUpdateOne {
	puo.mutation.SetBody(s)
	return puo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableBody(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetBody(*s)
	}
	return puo
}

// SetTextFormat sets the "text_format" field.
func (puo *PageUpdateOne) SetTextFormat(u uint) *PageUpdateOne {
	puo.mutation.ResetTextFormat()
	puo.mutation.SetTextFormat(u)
	return puo
}

// SetNillableTextFormat sets the "text_format" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTextFormat(u *uint) *PageUpdateOne {
	if u != nil {
		puo.SetTextFormat(*u)
	}
	return puo
}

// AddTextFormat adds u to the "text_format" field.
func (puo *PageUpdateOne) AddTextFormat(u int) *PageUpdateOne {
	puo.mutation.AddTextFormat(u)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PageUpdateOne) SetUpdatedAt(t time.Time) *PageUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (puo *PageUpdateOne) SetOwnerID(id int) *PageUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (puo *PageUpdateOne) SetNillableOwnerID(id *int) *PageUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the "owner" edge to the User entity.
func (puo *PageUpdateOne) SetOwner(u *User) *PageUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// Mutation returns the PageMutation object of the builder.
func (puo *PageUpdateOne) Mutation() *PageMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (puo *PageUpdateOne) ClearOwner() *PageUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// Where appends a list predicates to the PageUpdate builder.
func (puo *PageUpdateOne) Where(ps ...predicate.Page) *PageUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PageUpdateOne) Select(field string, fields ...string) *PageUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Page entity.
func (puo *PageUpdateOne) Save(ctx context.Context) (*Page, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PageUpdateOne) SaveX(ctx context.Context) *Page {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PageUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *PageUpdateOne) sqlSave(ctx context.Context) (_node *Page, err error) {
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Page.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, page.FieldID)
		for _, f := range fields {
			if !page.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != page.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Body(); ok {
		_spec.SetField(page.FieldBody, field.TypeString, value)
	}
	if value, ok := puo.mutation.TextFormat(); ok {
		_spec.SetField(page.FieldTextFormat, field.TypeUint, value)
	}
	if value, ok := puo.mutation.AddedTextFormat(); ok {
		_spec.AddField(page.FieldTextFormat, field.TypeUint, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.OwnerTable,
			Columns: []string{page.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.OwnerTable,
			Columns: []string{page.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Page{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
